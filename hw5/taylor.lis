     1                                  section .text
     2                                      global taylor
     3                                  
     4                                  ; double taylor(double x, unsigned long n)
     5                                  taylor:
     6                                      ; Prologue
     7 00000000 55                          push rbp
     8 00000001 4889E5                      mov rbp, rsp
     9 00000004 4883EC20                    sub rsp, 32  ; Allocate stack space for local variables
    10                                  
    11                                      ; Initialize sum and term
    12 00000008 0F57C9                      xorps xmm1, xmm1          ; xmm1 = sum = 0.0
    13 0000000B F20F105510                  movsd xmm2, qword [rbp+16]; xmm2 = x
    14 00000010 B801000000                  mov rax, 1                ; rax = factorial = 1
    15 00000015 4831C9                      xor rcx, rcx              ; rcx = i = 0
    16                                  
    17                                  .loop_start:
    18 00000018 4839F9                      cmp rcx, rdi              ; Compare i with n
    19 0000001B 7D2A                        jge .loop_end             ; If i >= n, exit loop
    20                                  
    21                                      ; Calculate term: x^i / i!
    22 0000001D 4885C9                      test rcx, rcx             ; Check if i == 0
    23 00000020 7404                        jz .first_term
    24 00000022 480FAFC1                    imul rax, rcx             ; factorial *= i
    25                                  .first_term:
    26 00000026 4889C3                      mov rbx, rax              ; Copy factorial to rbx
    27 00000029 F2480F2ADB                  cvtsi2sd xmm3, rbx        ; xmm3 = (double)factorial
    28                                  
    29 0000002E 4889CB                      mov rbx, rcx
    30 00000031 F20F10E2                    movsd xmm4, xmm2          ; xmm4 = x
    31 00000035 E813000000                  call pow                  ; xmm4 = x^i
    32                                  
    33 0000003A F20F5EE3                    divsd xmm4, xmm3          ; xmm4 = term = x^i / i!
    34 0000003E F20F58CC                    addsd xmm1, xmm4          ; sum += term
    35                                  
    36                                      ; Debugging: Optional code to print intermediate values
    37                                      ; Print x^i (in xmm4), i! (in xmm3), and sum (in xmm1)
    38                                  
    39 00000042 48FFC1                      inc rcx
    40 00000045 EBD1                        jmp .loop_start
    41                                  .loop_end:
    42 00000047 F20F10C1                    movsd xmm0, xmm1          ; Return sum in xmm0
    43                                  
    44                                      ; Epilogue
    45 0000004B C9                          leave
    46 0000004C C3                          ret
    47                                  
    48                                  ; Power function (x^i)
    49                                  pow:
    50 0000004D 4885DB                      test rbx, rbx
    51 00000050 740D                        jz .pow_end               ; If exponent is 0, result is 1
    52 00000052 F20F10C4                    movsd xmm0, xmm4          ; xmm0 = base = x
    53                                  .pow_loop:
    54 00000056 F20F59C4                    mulsd xmm0, xmm4          ; xmm0 *= base
    55 0000005A 48FFCB                      dec rbx
    56 0000005D 75F7                        jnz .pow_loop             ; Repeat until exponent reaches 0
    57                                  .pow_end:
    58 0000005F C3                          ret
