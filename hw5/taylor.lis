     1                                  global taylor
     2                                  
     3                                  section .text
     4                                  
     5                                  ; Function prototype:
     6                                  ; double taylor(double x, unsigned long int n)
     7                                  ; Inputs:
     8                                  ;   x in xmm0 (double)
     9                                  ;   n in rdi (unsigned long int)
    10                                  ; Output:
    11                                  ;   Result in xmm0 (double)
    12                                  
    13                                  taylor:
    14                                      ; Back up callee-saved registers
    15 00000000 55                          push rbp
    16 00000001 4889E5                      mov rbp, rsp
    17 00000004 53                          push rbx
    18 00000005 4154                        push r12
    19 00000007 4155                        push r13
    20 00000009 4156                        push r14
    21 0000000B 4157                        push r15
    22                                  
    23                                      ; Initialize variables
    24 0000000D 4889FB                      mov rbx, rdi          ; rbx = n (number of terms)
    25 00000010 41BC01000000                mov r12, 1            ; r12 = factorial accumulator, initially 1
    26 00000016 4D31ED                      xor r13, r13          ; r13 = k (current term index), initially 0
    27 00000019 F20F10C8                    movsd xmm1, xmm0      ; xmm1 = x (base value for terms)
    28 0000001D F20F10D0                    movsd xmm2, xmm0      ; xmm2 = x^k, initially x^0 = 1.0
    29 00000021 F20F101C25-                 movsd xmm3, qword [taylor_one] ; xmm3 = result accumulator, initially 1.0
    29 00000026 [00000000]         
    30                                  
    31                                  taylor_loop:
    32                                      ; Break if k > n (all terms computed)
    33 0000002A 4939DD                      cmp r13, rbx
    34 0000002D 7F1B                        jg taylor_done
    35                                  
    36                                      ; Compute current term: xmm4 = x^k / k!
    37 0000002F F20F10E2                    movsd xmm4, xmm2      ; xmm4 = x^k
    38 00000033 F2410F5E2424                divsd xmm4, qword [r12] ; xmm4 = x^k / k!
    39 00000039 F20F58DC                    addsd xmm3, xmm4      ; result += x^k / k!
    40                                  
    41                                      ; Increment k (r13) and compute the next term
    42 0000003D 49FFC5                      inc r13               ; k++
    43 00000040 F20F59D1                    mulsd xmm2, xmm1      ; xmm2 *= x (next x^k)
    44 00000044 4D0FAFE5                    imul r12, r13         ; r12 *= k (next factorial)
    45                                  
    46                                      ; Loop back for next term
    47 00000048 EBE0                        jmp taylor_loop
    48                                  
    49                                  taylor_done:
    50                                      ; Return result in xmm0
    51 0000004A F20F10C3                    movsd xmm0, xmm3
    52                                  
    53                                      ; Restore callee-saved registers
    54 0000004E 415F                        pop r15
    55 00000050 415E                        pop r14
    56 00000052 415D                        pop r13
    57 00000054 415C                        pop r12
    58 00000056 5B                          pop rbx
    59 00000057 5D                          pop rbp
    60 00000058 C3                          ret
    61                                  
    62                                  section .data
    63 00000000 000000000000F03F        taylor_one dq 1.0  ; Constant value 1.0 for initializing result
