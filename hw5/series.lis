     1                                  global series
     2                                  extern taylor
     3                                  extern printf
     4                                  extern scanf
     5                                  
     6                                  section .data
     7 00000000 5468697320736F6674-         prompt1 db "This software will compute any power of e that you may need.", 10, 0
     7 00000009 776172652077696C6C-
     7 00000012 20636F6D7075746520-
     7 0000001B 616E7920706F776572-
     7 00000024 206F66206520746861-
     7 0000002D 7420796F75206D6179-
     7 00000036 206E6565642E0A00   
     8 0000003E 506C6561736520656E-         prompt2 db "Please enter a float number value for x: ", 0
     8 00000047 746572206120666C6F-
     8 00000050 6174206E756D626572-
     8 00000059 2076616C756520666F-
     8 00000062 7220783A2000       
     9 00000068 506C6561736520656E-         prompt3 db "Please enter the number of terms to include in the Taylor sum: ", 0
     9 00000071 74657220746865206E-
     9 0000007A 756D626572206F6620-
     9 00000083 7465726D7320746F20-
     9 0000008C 696E636C7564652069-
     9 00000095 6E2074686520546179-
     9 0000009E 6C6F722073756D3A20-
     9 000000A7 00                 
    10 000000A8 5468652074696D6520-         start_time_msg db "The time on the clock is now %llu tics and taylor has been called.", 10, 0
    10 000000B1 6F6E2074686520636C-
    10 000000BA 6F636B206973206E6F-
    10 000000C3 7720256C6C75207469-
    10 000000CC 637320616E64207461-
    10 000000D5 796C6F722068617320-
    10 000000DE 6265656E2063616C6C-
    10 000000E7 65642E0A00         
    11 000000EC 5468652074696D6520-         end_time_msg db "The time on the clock when Taylor terminated was %llu tics.", 10, 0
    11 000000F5 6F6E2074686520636C-
    11 000000FE 6F636B207768656E20-
    11 00000107 5461796C6F72207465-
    11 00000110 726D696E6174656420-
    11 00000119 77617320256C6C7520-
    11 00000122 746963732E0A00     
    12 00000129 546865206578656375-         elapsed_time_msg db "The execution time was %llu tics.", 10, 0
    12 00000132 74696F6E2074696D65-
    12 0000013B 2077617320256C6C75-
    12 00000144 20746963732E0A00   
    13 0000014C 54686520636F6D7075-         result_msg db "The computed approximation of e^x is %.8f", 10, 0
    13 00000155 74656420617070726F-
    13 0000015E 78696D6174696F6E20-
    13 00000167 6F6620655E78206973-
    13 00000170 20252E38660A00     
    14 00000177 526177206D656D6F72-         raw_memory_msg db "Raw memory contents of x after scanf: 0x%016lx", 10, 0
    14 00000180 7920636F6E74656E74-
    14 00000189 73206F662078206166-
    14 00000192 746572207363616E66-
    14 0000019B 3A203078253031366C-
    14 000001A4 780A00             
    15 000001A7 526177206D656D6F72-         raw_memory_msg_int db "Raw memory contents of n after scanf: 0x%016lx", 10, 0
    15 000001B0 7920636F6E74656E74-
    15 000001B9 73206F66206E206166-
    15 000001C2 746572207363616E66-
    15 000001CB 3A203078253031366C-
    15 000001D4 780A00             
    16 000001D7 44656275673A20783D-         debug_msg db "Debug: x=%lf, n=%ld", 10, 0
    16 000001E0 256C662C206E3D256C-
    16 000001E9 640A00             
    17 000001EC 4572726F723A20496E-         error_msg db "Error: Invalid input for x or n.", 10, 0
    17 000001F5 76616C696420696E70-
    17 000001FE 757420666F72207820-
    17 00000207 6F72206E2E0A00     
    18 0000020E 256C6600                    float_format db "%lf", 0
    19 00000212 256C6400                    int_format db "%ld", 0  ; Updated format specifier for integer input
    20                                  
    21                                  section .bss
    22                                      align 8                  ; Ensure proper alignment
    23 00000000 ????????????????            user_num resq 1          ; To store the user's float input (x)
    24 00000008 ????????????????            user_int resq 1          ; To store the user's integer input (n)
    25 00000010 ????????????????            result resq 1            ; To store the result of the taylor function
    26 00000018 ????????????????            start_ticks resq 1       ; To store the start clock ticks
    27 00000020 ????????????????            end_ticks resq 1         ; To store the end clock ticks
    28 00000028 ????????????????            elapsed_ticks resq 1     ; To store the elapsed clock ticks
    29                                  
    30                                  section .text
    31                                  series:
    32                                      ; Back up registers
    33 00000000 55                          push rbp
    34 00000001 4889E5                      mov rbp, rsp
    35 00000004 53                          push rbx
    36 00000005 51                          push rcx
    37 00000006 52                          push rdx
    38 00000007 56                          push rsi
    39 00000008 57                          push rdi
    40 00000009 4150                        push r8
    41 0000000B 4151                        push r9
    42 0000000D 4152                        push r10
    43 0000000F 4153                        push r11
    44 00000011 4154                        push r12
    45 00000013 4155                        push r13
    46 00000015 4156                        push r14
    47 00000017 4157                        push r15
    48 00000019 9C                          pushf
    49                                  
    50                                      ; Display prompt1
    51 0000001A B800000000                  mov rax, 0
    52 0000001F 48BF-                       mov rdi, prompt1
    52 00000021 [0000000000000000] 
    53 00000029 E8(00000000)                call printf
    54                                  
    55                                      ; Prompt for x (float value)
    56 0000002E B800000000                  mov rax, 0
    57 00000033 48BF-                       mov rdi, prompt2
    57 00000035 [3E00000000000000] 
    58 0000003D E8(00000000)                call printf
    59 00000042 B801000000                  mov rax, 1
    60 00000047 48BF-                       mov rdi, float_format
    60 00000049 [0E02000000000000] 
    61 00000051 48BE-                       mov rsi, user_num
    61 00000053 [0000000000000000] 
    62 0000005B E8(00000000)                call scanf
    63                                  
    64                                      ; Debug: Print raw memory contents of x
    65 00000060 488B0425[00000000]          mov rax, qword [user_num]
    66 00000068 48BF-                       mov rdi, raw_memory_msg
    66 0000006A [7701000000000000] 
    67 00000072 4889C6                      mov rsi, rax
    68 00000075 E8(00000000)                call printf
    69                                  
    70                                      ; Prompt for n (integer value)
    71 0000007A B800000000                  mov rax, 0
    72 0000007F 48BF-                       mov rdi, prompt3
    72 00000081 [6800000000000000] 
    73 00000089 E8(00000000)                call printf
    74 0000008E B801000000                  mov rax, 1
    75 00000093 48BF-                       mov rdi, int_format
    75 00000095 [1202000000000000] 
    76 0000009D 48BE-                       mov rsi, user_int
    76 0000009F [0800000000000000] 
    77 000000A7 E8(00000000)                call scanf
    78                                  
    79                                      ; Debug: Print raw memory contents of n
    80 000000AC 488B0425[08000000]          mov rax, qword [user_int]
    81 000000B4 48BF-                       mov rdi, raw_memory_msg_int
    81 000000B6 [A701000000000000] 
    82 000000BE 4889C6                      mov rsi, rax
    83 000000C1 E8(00000000)                call printf
    84                                  
    85                                      ; Check for invalid n
    86 000000C6 488B0425[08000000]          mov rax, qword [user_int]
    87 000000CE 4885C0                      test rax, rax
    88 000000D1 7E33                        jle error_exit
    89                                  
    90                                  ; Debug print for x and n
    91 000000D3 B800000000              mov rax, 0
    92 000000D8 48BF-                   mov rdi, debug_msg
    92 000000DA [D701000000000000] 
    93                                  
    94                                  ; Load x into the FPU stack and store back
    95 000000E2 DD0425[00000000]        fld qword [user_num]        ; Load `user_num` onto FPU stack
    96 000000E9 DD1C25[10000000]        fstp qword [result]         ; Store back into memory
    97 000000F0 F20F100425-             movsd xmm0, qword [result]  ; Move into `xmm0` for printf
    97 000000F5 [10000000]         
    98                                  
    99                                  ; Ensure n is correctly loaded into rsi for printf
   100 000000F9 488B3425[08000000]      mov rsi, qword [user_int]
   101                                  
   102                                  ; Call printf to display debug information
   103 00000101 E8(00000000)            call printf
   104                                  
   105                                  
   106                                  
   107                                  
   108                                      ; Rest of the code remains unchanged...
   109                                  
   110                                  error_exit:
   111                                      ; Print error message and exit
   112 00000106 B800000000                  mov rax, 0
   113 0000010B 48BF-                       mov rdi, error_msg
   113 0000010D [EC01000000000000] 
   114 00000115 E8(00000000)                call printf
   115                                  
   116                                  cleanup:
   117                                      ; Restore registers
   118 0000011A 9D                          popf
   119 0000011B 415F                        pop r15
   120 0000011D 415E                        pop r14
   121 0000011F 415D                        pop r13
   122 00000121 415C                        pop r12
   123 00000123 415B                        pop r11
   124 00000125 415A                        pop r10
   125 00000127 4159                        pop r9
   126 00000129 4158                        pop r8
   127 0000012B 5F                          pop rdi
   128 0000012C 5E                          pop rsi
   129 0000012D 5A                          pop rdx
   130 0000012E 59                          pop rcx
   131 0000012F 5B                          pop rbx
   132 00000130 5D                          pop rbp
   133 00000131 C3                          ret
