     1                                  global isinteger
     2                                  
     3                                  null equ 0
     4                                  true equ -1
     5                                  false equ 0
     6                                  
     7                                  segment .data
     8                                     ;This segment is empty
     9                                  
    10                                  segment .bss
    11                                     ;This segment is empty
    12                                  
    13                                  segment .text
    14                                  isinteger:
    15                                  
    16                                  ;Block that backs up almost all GPRs
    17                                  ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
    18 00000000 55                      push rbp                                          ;Backup rbp
    19 00000001 4889E5                  mov  rbp,rsp                                      ;The base pointer now points to top of stack
    20 00000004 57                      push rdi                                          ;Backup rdi
    21 00000005 56                      push rsi                                          ;Backup rsi
    22 00000006 52                      push rdx                                          ;Backup rdx
    23 00000007 51                      push rcx                                          ;Backup rcx
    24 00000008 4150                    push r8                                           ;Backup r8
    25 0000000A 4151                    push r9                                           ;Backup r9
    26 0000000C 4152                    push r10                                          ;Backup r10
    27 0000000E 4153                    push r11                                          ;Backup r11
    28 00000010 4154                    push r12                                          ;Backup r12
    29 00000012 4155                    push r13                                          ;Backup r13
    30 00000014 4156                    push r14                                          ;Backup r14
    31 00000016 4157                    push r15                                          ;Backup r15
    32 00000018 53                      push rbx                                          ;Backup rbx
    33 00000019 9C                      pushf                                             ;Backup rflags
    34                                  
    35                                  
    36                                  ;Make a copy of the passed in array of ascii values
    37 0000001A 4989FD                  mov r13, rdi                                      ;r13 is the array of char
    38                                  
    39                                  ;Let r14 be an index of the array r13.  Initialize to integer 0
    40 0000001D 4D31F6                  xor r14, r14
    41                                  
    42                                  ;Check for leading plus or minus signs
    43 00000020 41807D002B              cmp byte [r13],'+'
    44 00000025 7407                    je increment_index
    45 00000027 41807D002D              cmp byte[r13],'-'
    46 0000002C 7503                    jne continue_validation
    47                                  increment_index:
    48 0000002E 49FFC6                  inc r14
    49                                  
    50                                  continue_validation:
    51                                  
    52                                  ; Block: loop to validate all digits
    53                                  loop_digits:
    54 00000031 B800000000                  mov rax, 0
    55 00000036 4831FF                      xor rdi, rdi                            ; Zero out rdi
    56 00000039 438A7C3500                  mov dil, byte [r13 + r14]              ; Get the next character
    57 0000003E E837000000                  call is_digit                           ; Check if it's a digit
    58 00000043 4883F800                    cmp rax, false                          ; If it's not a digit, return false
    59 00000047 7414                        je return_false
    60 00000049 49FFC6                      inc r14                                  ; Move to the next character
    61 0000004C 43807C350000                cmp byte [r13 + r14], null              ; Check if end of string (null)
    62 00000052 75DD                        jne loop_digits                          ; Loop if there are more digits
    63                                  
    64                                  ; All characters processed and valid
    65 00000054 48C7C0FFFFFFFF          mov rax, true
    66 0000005B EB05                    jmp restore_gpr_registers
    67                                  
    68                                  return_false:
    69 0000005D B800000000              mov rax, false
    70                                  restore_gpr_registers:
    71 00000062 9D                      popf                                    ;Restore rflags
    72 00000063 5B                      pop rbx                                 ;Restore rbx
    73 00000064 415F                    pop r15                                 ;Restore r15
    74 00000066 415E                    pop r14                                 ;Restore r14
    75 00000068 415D                    pop r13                                 ;Restore r13
    76 0000006A 415C                    pop r12                                 ;Restore r12
    77 0000006C 415B                    pop r11                                 ;Restore r11
    78 0000006E 415A                    pop r10                                 ;Restore r10
    79 00000070 4159                    pop r9                                  ;Restore r9
    80 00000072 4158                    pop r8                                  ;Restore r8
    81 00000074 59                      pop rcx                                 ;Restore rcx
    82 00000075 5A                      pop rdx                                 ;Restore rdx
    83 00000076 5E                      pop rsi                                 ;Restore rsi
    84 00000077 5F                      pop rdi                                 ;Restore rdi
    85 00000078 5D                      pop rbp                                 ;Restore rbp
    86                                  
    87 00000079 C3                      ret 
    88                                  ;========= Begin function is_digit ==================================================================================
    89                                  
    90                                  ;****************************************************************************************************************************
    91                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
    92                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
    93                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
    94                                  ;                                                                                                                           *
    95                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
    96                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
    97                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
    98                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
    99                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   100                                  ;****************************************************************************************************************************
   101                                  ;
   102                                  ;
   103                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   104                                  ;Author information
   105                                  ;  Author name: Floyd Holliday
   106                                  ;  Author email: holliday@fullerton.edu
   107                                  ;  Author phone (wired phone in CS building): (657)278-7021
   108                                  ;
   109                                  ;Status
   110                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   111                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   112                                  
   113                                  ;Function information
   114                                  ;  Function name: is_digit
   115                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   116                                  ;  Programming language: X86 assembly in Intel syntax.
   117                                  ;  Date development began:  2022-Feb-28
   118                                  ;  Date version 1.0 finished: 2022-Feb 28
   119                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   120                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   121                                  ;  Known issues: none
   122                                  ;  Assembler used for testing: Nasm version 2.14.02
   123                                  ;  Prototype: bool is_digit(char);
   124                                  ;
   125                                  ;Purpose
   126                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   127                                  ;
   128                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   129                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   130                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   131                                  ;
   132                                  ;Software design document:
   133                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   134                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   135                                  
   136                                  ;========= Begin source code ====================================================================================
   137                                  ;Declaration area
   138                                  true equ -1
   139                                  false equ 0
   140                                  ascii_value_of_zero equ 0x30
   141                                  ascii_value_of_nine equ 0x39
   142                                  
   143                                  segment .data
   144                                     ;This segment is empty
   145                                  
   146                                  segment .bss
   147                                     ;This segment is empty
   148                                  
   149                                  segment .text
   150                                  is_digit:
   151                                      ;Block that backs up almost all GPRs
   152                                      ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   153 0000007A 55                          push rbp                                          ;Backup rbp
   154 0000007B 4889E5                      mov  rbp,rsp                                      ;The base pointer now points to top of stack
   155 0000007E 57                          push rdi                                          ;Backup rdi
   156 0000007F 56                          push rsi                                          ;Backup rsi
   157 00000080 52                          push rdx                                          ;Backup rdx
   158 00000081 51                          push rcx                                          ;Backup rcx
   159 00000082 4150                        push r8                                           ;Backup r8
   160 00000084 4151                        push r9                                           ;Backup r9
   161 00000086 4152                        push r10                                          ;Backup r10
   162 00000088 4153                        push r11                                          ;Backup r11
   163 0000008A 4154                        push r12                                          ;Backup r12
   164 0000008C 4155                        push r13                                          ;Backup r13
   165 0000008E 4156                        push r14                                          ;Backup r14
   166 00000090 4157                        push r15                                          ;Backup r15
   167 00000092 53                          push rbx                                          ;Backup rbx
   168 00000093 9C                          pushf                                             ;Backup rflags
   169                                  
   170                                      ;Make a copy of the passed in array of ascii values.
   171                                      ;Note that only the low one-byte of rdi is important for this function is_digit.
   172                                      ;Nevertheless, we copy the entire 8-byte register.
   173 00000094 41BD00000000                mov r13,0
   174 0000009A 4188FD                      mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   175                                  
   176                                      ;Block to test if value in r13 >= ascii(0)
   177 0000009D 4983FD30                    cmp r13,ascii_value_of_zero
   178 000000A1 7C12                        jl is_digit.return_false
   179                                  
   180                                      ;Block to test if value in r13 <= ascii(9)
   181 000000A3 4983FD39                    cmp r13,ascii_value_of_nine
   182 000000A7 7F0C                        jg is_digit.return_false
   183                                  
   184                                      ;Return true
   185 000000A9 4831C0                      xor rax,rax  ;Set rax to zero
   186 000000AC 48C7C0FFFFFFFF              mov rax,true
   187 000000B3 EB08                        jmp is_digit.restore_gpr_registers
   188                                  
   189                                      is_digit.return_false:
   190 000000B5 4831C0                      xor rax,rax  ;Set rax to zero
   191 000000B8 B800000000                  mov rax,false
   192                                  
   193                                      is_digit.restore_gpr_registers:
   194                                      ;Restore all general purpose registers to their original values
   195 000000BD 9D                          popf                                    ;Restore rflags
   196 000000BE 5B                          pop rbx                                 ;Restore rbx
   197 000000BF 415F                        pop r15                                 ;Restore r15
   198 000000C1 415E                        pop r14                                 ;Restore r14
   199 000000C3 415D                        pop r13                                 ;Restore r13
   200 000000C5 415C                        pop r12                                 ;Restore r12
   201 000000C7 415B                        pop r11                                 ;Restore r11
   202 000000C9 415A                        pop r10                                 ;Restore r10
   203 000000CB 4159                        pop r9                                  ;Restore r9
   204 000000CD 4158                        pop r8                                  ;Restore r8
   205 000000CF 59                          pop rcx                                 ;Restore rcx
   206 000000D0 5A                          pop rdx                                 ;Restore rdx
   207 000000D1 5E                          pop rsi                                 ;Restore rsi
   208 000000D2 5F                          pop rdi                                 ;Restore rdi
   209 000000D3 5D                          pop rbp                                 ;Restore rbp
   210                                  
   211 000000D4 C3                          ret 
